version: '3.8'

services:
  # PostgreSQL Database with replication support
  postgres:
    image: postgres:16-alpine
    container_name: tv-menu-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-tv_menu_designer}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tv-menu-network

  # Redis with persistence and password
  redis:
    image: redis:7-alpine
    container_name: tv-menu-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tv-menu-network

  # Backend API
  backend:
    build:
      context: ../../
      dockerfile: ./infrastructure/docker/backend.Dockerfile
    container_name: tv-menu-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-tv_menu_designer}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://yourdomain.com}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-tv-menu-designer}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tv-menu-network

  # Designer Frontend
  designer:
    build:
      context: ../../
      dockerfile: ./infrastructure/docker/designer.Dockerfile
      args:
        - VITE_API_URL=${API_URL:-https://api.yourdomain.com}
        - VITE_WS_URL=${WS_URL:-wss://api.yourdomain.com}
    container_name: tv-menu-designer
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tv-menu-network

  # Nginx with SSL
  nginx:
    image: nginx:alpine
    container_name: tv-menu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    restart: unless-stopped
    depends_on:
      - backend
      - designer
    networks:
      - tv-menu-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: tv-menu-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - tv-menu-network

  # Backup service
  backup:
    image: postgres:16-alpine
    container_name: tv-menu-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - postgres
    networks:
      - tv-menu-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  logs:
    driver: local

networks:
  tv-menu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16