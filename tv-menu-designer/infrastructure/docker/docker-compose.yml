version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: tv-menu-postgres
    environment:
      POSTGRES_DB: tv_menu_designer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tv-menu-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tv-menu-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tv-menu-network

  # Backend API
  backend:
    build:
      context: ../../
      dockerfile: ./infrastructure/docker/backend.Dockerfile
    container_name: tv-menu-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: tv_menu_designer
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-refresh-secret-key-change-in-production}
      CORS_ORIGINS: http://localhost,http://localhost:3001
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tv-menu-network

  # Designer Frontend
  designer:
    build:
      context: ../../
      dockerfile: ./infrastructure/docker/designer.Dockerfile
      args:
        - VITE_API_URL=http://localhost:3000
        - VITE_WS_URL=ws://localhost:3000
    container_name: tv-menu-designer
    ports:
      - "3001:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - tv-menu-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tv-menu-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - designer
    networks:
      - tv-menu-network

volumes:
  postgres_data:
  redis_data:
  uploads:
  logs:

networks:
  tv-menu-network:
    driver: bridge